Git

분산개발

효율개발 (버전관리)

비선형적인 개발 (Branch 개념 사용)

변경 이력 보장 (Commit 내역이 모두 보장됌)




			(commit하기 전)  (우리 컴퓨터에 있는 git저장소)     (사이트에 있는 git저장소)
working directory     staging Area     Local Repository    Remote Repository
               add ->          commit ->          push ->


		<----merge                        	 <- fetch


fetch와 merge를 한번에 사용할 수 있는 기능은 git pull





*저장소 (Repository)

Repo라고함. 실제소스 코드, Commit내역등이 담겨있는 곳 
.git폴더에 담겨있음 (메타데이터들이)




*수정

PR = Pull Request (소스코드가 수정될 수 있도록 요청하는 것)

commit한거 내릴려면 reset

status보면 현재 상태 볼 수 있음.

status할 때 수정된 내역이 있어도,

git checkout -- [파일이름] 을 하면, 수정 내역을 무시할 수 있음.

커밋 메세지 수정은,

git commit --ammend를 사용하면 됌.

뒤로가는 것은 wq!





브랜치 (여러명의 개발자가 동시에 다른 기능을 개발할 수 있도록 하는 기능 제공)

서로에게 영향을 받지 않음.



어떤 팀은 버그 픽스, 어떤 팀은 기능 개발을 담당한다고 하면,

배포된 버전으로 부터 각기 다른 파일에서 작업을 진행.

이후 모두 진행되면 합치기(Merge)를 수행하여 모든 기능이 합쳐진 것을 배포할 수 있음.

안정성이 매우 뛰어남.



git branch 명령어를 통해 현재 가지고있는 branch를 알 수 있음.

git branch [가지이름]을 하면 생성 가능.

git checkout [가지이름]을 하면 해당 branch로 이동


git commit을 한 가지에서, 이후 main으로 돌아와

git merge [가지이름] 을 하면 해당 가지와 병합을 함.

이후 git push 


각기 다른 branch에서 같은 파일을 commit하면 conflict가 생김

이 때 merge는 main에서만 하는데, 그 때 main에서 merge를 하면 conflict된 파일을 제공.

각기 다른 branch에서 수정한 내역을 git에서 보여주고 어떻게 선택할 건지 선택 후, 다시 add commit








remote명령어를 이용해 원격 저장소를 여러개 등록할 수 도 있음.

git remote -v 를 사용하면 현재 원격저장소들이 보임.

git remote rename [원래이름] [바꿀이름] 으로 이름 변경도 가능.

이후 log나 merge commit등을 할 때, origin/main을 통해 해당 repo의 해당 branch에만 작업가능.

remote를 제거하려면 git remote rm [이름]을 하면 됌.




*git에서 log 다루기.

git log만 하면 최신순서대로 차례대로 commit내역이 나옴.

많은경우 q를 눌러서 나올 수 있음.



git log --stat을 하면 해당 commit에서 얼마나 많은 줄이 바뀌었는지 볼 수 있음


git log -p -3 을 하면 어떤 내용들이 바뀌었는지 위에서 3개만 보여줌.

git log --graph를 하면 어떻게 commit이 되었는지 그래프 형식으로 보여줌.



git log --pretty 을 하면 사용자가 원하는 방식으로 log를 출력함

format:"%h -> %an, %ar : %s" --graph






--README.md (md = markdown)



#은 글머리

#1개 -> 가장큰, ##2개 -> 약간 작은, 3개 -> 더작아짐, 5개까지 반영.

일반적으로 #1개는 너무크기떄문에 #2개나 3개를 씀.



소스코드 블록